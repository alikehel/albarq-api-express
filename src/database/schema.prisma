generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_POSTGRESQL_PROD")
}

// const roles = [
//   "مدير الشركه",
//   "مدير الحسابات",
//   "محاسب",
//   "مندوب توصيل",
//   "مندوب استلام",
//   "مدير فرع",
//   "موظف طوارئ",
//   "مدخل بيانات",
//   "موظف مخزن",
//    "موظف استعلامات"
// ];

enum Role {
  SUPER_ADMIN
  COMPANY_MANAGER
  ACCOUNT_MANAGER
  ACCOUNTANT
  DELIVERY_AGENT
  RECEIVING_AGENT
  BRANCH_MANAGER
  EMERGENCY_EMPLOYEE
  DATA_ENTRY
  REPOSITORIY_EMPLOYEE
  INQUIRY_EMPLOYEE
}

// const permissions = [
// "احالة الطلبات الي المندوب",
// "اضافة صفحة",
// "اضافة طلبية",
// "اضافة عميل",
// "تعديل اسم عميل",
// "تعديل المبلغ الكلي للعملية",
// "تغيير الحالة",
// "تغيير حالة الطلبية المغلقة",
// "قفل حالة الطلبية",
// "مسح الاسعار",
// "مسح الطلبيات",
// "مسح الكشوفات",
// "مسح كشوفات الشركات",
// "مسح كشوفات المخازن",
// "مسح كشوفات المحافظات",
// "مسح كشوفات المندوبين",
// ];

enum Permission {
  ADD_ORDER_TO_DELIVERY_AGENT
  ADD_PAGE
  ADD_ORDER
  ADD_CLIENT
  EDIT_CLIENT_NAME
  EDIT_ORDER_TOTAL_AMOUNT
  CHANGE_ORDER_STATUS
  CHANGE_CLOSED_ORDER_STATUS
  LOCK_ORDER_STATUS
  DELETE_PRICES
  DELETE_ORDERS
  DELETE_REPORTS
  DELETE_COMPANY_REPORTS
  DELETE_REPOSITORIES_REPORTS
  DELETE_GOVERNMENT_REPORTS
  DELETE_DELIVERY_AGENT_REPORTS
}

enum Governorate {
  AL_ANBAR
  BABIL
  BAGHDAD
  BASRA
  DHI_QAR
  AL_QADISIYYAH
  DIYALA
  DUHOK
  ERBIL
  KARBALA
  KIRKUK
  MAYSAN
  MUTHANNA
  NAJAF
  NINAWA
  SALAH_AL_DIN
  SULAYMANIYAH
  WASIT
}

// const accountTypes = ["عميل", "مساعد عميل"];

enum AccountType {
  CLIENT
  CLIENT_ASSISTANT
}

// const orderStatus = [
//   "تم تسجيل الطلب",
//   "جاهز للارسال",
//   "بالطريق مع المندوب",
//   "تم تسليم الطلب",
//   "استبدال الطلب",
//   "راجع جزئى",
//   "راجع كلي",
//   "مؤجل",
//   "تغيير العنوان",
//   "اعاده الارسال",
//   "عند مندوب الاستلام",
//   "قيد المعالجه",
// ];

enum OrderStatus {
  REGISTERED
  READY_TO_SEND
  WITH_DELIVERY_AGENT
  DELIVERED
  REPLACED
  PARTIALLY_RETURNED
  RETURNED
  POSTPONED
  CHANGE_ADDRESS
  RESEND
  WITH_RECEIVING_AGENT
  PROCESSING
}

// const deliveryTypes = ["توصيل عادي", "استبدال"];

enum DeliveryType {
  NORMAL
  REPLACEMENT
}

model User {
  id           String   @id @default(uuid())
  username     String   @unique
  name         String
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isSuperAdmin Boolean  @default(false)
  phone        String?
  salary       Decimal? @default(0)

  repositoryId String?
  branchId     String?

  repository   Repository?    @relation(fields: [repositoryId], references: [id])
  branch       Branch?        @relation(fields: [branchId], references: [id])
  role         Role
  permissions  Permission[]
  Client       Client[]
  Location     Location[]
  Order        Order[]
  Notification Notification[]
}

model Client {
  id          String      @id @default(uuid())
  name        String      @unique
  phone       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  accountType AccountType
  token       String?
  password    String?

  branchId String
  userId   String

  branch    Branch? @relation(fields: [branchId], references: [id])
  createdBy User    @relation(fields: [userId], references: [id])
  Order     Order[]
  Store     Store[]
}

model Store {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     String?

  client   Client @relation(fields: [clientId], references: [id])
  clientId String
}

model Branch {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String?
  phone     String?

  Repository  Repository[]
  Client      Client[]
  User        User[]
  governorate Governorate?
  Location    Location[]
}

model Repository {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branchId String

  branch Branch @relation(fields: [branchId], references: [id])
  User   User[]
}

model Location {
  id   String @id @default(uuid())
  name String @unique

  deliveryAgents User[]
  governorate    Governorate?
  branch         Branch       @relation(fields: [branchId], references: [id])
  branchId       String
}

model Tenant {
  id                                      String   @id @default(uuid())
  name                                    String   @unique
  phone                                   String?
  website                                 String?
  logo                                    String?
  registrationText                        String?
  governoratePrice                        Decimal  @default(0)
  deliveryAgentFee                        Decimal  @default(0)
  // deliveryPrice              Decimal  @default(0)
  baghdadPrice                            Decimal  @default(0)
  additionalPriceForEvery500000IraqiDinar Decimal  @default(0)
  additionalPriceForEveryKilogram         Decimal  @default(0)
  additionalPriceForRemoteAreas           Decimal  @default(0)
  orderStatusAutomaticUpdate              Boolean  @default(false)
  // mainCompany                Boolean  @default(false)
  createdAt                               DateTime @default(now())
  updatedAt                               DateTime @updatedAt
}

model Order {
  id               String          @id @default(uuid())
  totalCost        Decimal         @default(0)
  paidAmount       Decimal         @default(0)
  totalCostInUSD   Decimal         @default(0)
  paidAmountInUSD  Decimal         @default(0)
  discount         Decimal         @default(0)
  receiptNumber    Int             @default(0)
  quantity         Int             @default(0)
  weight           Float           @default(0)
  recipientName    String
  recipientPhone   String
  recipientAddress String
  details          String
  notes            String
  status           OrderStatus
  deliveryType     DeliveryType
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  client           Client          @relation(fields: [clientId], references: [id])
  deliveryAgent    User?           @relation(fields: [userId], references: [id])
  deliveryDate     DateTime?
  clientId         String
  userId           String?
  // OrderProducts   OrderProducts[]
  OrderProducts    OrderProducts[]
}

model Product {
  id            String          @id @default(uuid())
  title         String
  price         Decimal
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  image         String?
  stock         Int             @default(0)
  // OrderProducts OrderProducts[]
  Category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    String
  OrderProducts OrderProducts[]
  ProductColors ProductColors[]
  ProductSizes  ProductSizes[]
}

model Category {
  id        String    @id @default(uuid())
  title     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Product   Product[]
}

model OrderProducts {
  product   Product @relation(fields: [productId], references: [id])
  productId String
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String
  quantity  Int
  color     Color?  @relation(fields: [colorId], references: [id])
  colorId   String?
  size      Size?   @relation(fields: [sizeId], references: [id])
  sizeId    String?

  @@id([productId, orderId])
}

model Size {
  id            String          @id @default(uuid())
  title         String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ProductSizes  ProductSizes[]
  OrderProducts OrderProducts[]
}

model Color {
  id            String          @id @default(uuid())
  title         String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ProductColors ProductColors[]
  OrderProducts OrderProducts[]
}

model ProductColors {
  product   Product @relation(fields: [productId], references: [id])
  productId String
  color     Color   @relation(fields: [colorId], references: [id])
  colorId   String
  quantity  Int

  @@id([productId, colorId])
}

model ProductSizes {
  product   Product @relation(fields: [productId], references: [id])
  productId String
  size      Size    @relation(fields: [sizeId], references: [id])
  sizeId    String
  quantity  Int

  @@id([productId, sizeId])
}

model Notification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  title     String
  content   String
  // type    String // success, error, warning, info
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  seen      Boolean  @default(false)
}
