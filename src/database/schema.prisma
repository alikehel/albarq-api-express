generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL_POSTGRESQL_PROD")
}

// const roles = [
//   "مدير الشركه",
//   "مدير الحسابات",
//   "محاسب",
//   "مندوب توصيل",
//   "مندوب استلام",
//   "مدير فرع",
//   "موظف طوارئ",
//   "مدخل بيانات",
//   "موظف مخزن",
//    "موظف استعلامات"
// ];

enum AdminRole {
  SUPER_ADMIN
  ADMIN
}

enum EmployeeRole {
  COMPANY_MANAGER
  ACCOUNT_MANAGER
  ACCOUNTANT
  DELIVERY_AGENT
  RECEIVING_AGENT
  BRANCH_MANAGER
  EMERGENCY_EMPLOYEE
  DATA_ENTRY
  REPOSITORIY_EMPLOYEE
  INQUIRY_EMPLOYEE
}

// const accountTypes = ["عميل", "مساعد عميل"];

enum ClientRole {
  CLIENT
  CLIENT_ASSISTANT
}

// const permissions = [
// "احالة الطلبات الي المندوب",
// "اضافة صفحة",
// "اضافة طلبية",
// "اضافة عميل",
// "تعديل اسم عميل",
// "تعديل المبلغ الكلي للعملية",
// "تغيير الحالة",
// "تغيير حالة الطلبية المغلقة",
// "قفل حالة الطلبية",
// "مسح الاسعار",
// "مسح الطلبيات",
// "مسح الكشوفات",
// "مسح كشوفات الشركات",
// "مسح كشوفات المخازن",
// "مسح كشوفات المحافظات",
// "مسح كشوفات المندوبين",
// ];

enum Permission {
  ADD_ORDER_TO_DELIVERY_AGENT
  ADD_PAGE
  ADD_ORDER
  ADD_CLIENT
  EDIT_CLIENT_NAME
  EDIT_ORDER_TOTAL_AMOUNT
  CHANGE_ORDER_STATUS
  CHANGE_CLOSED_ORDER_STATUS
  LOCK_ORDER_STATUS
  DELETE_PRICES
  DELETE_ORDERS
  DELETE_REPORTS
  DELETE_COMPANY_REPORTS
  DELETE_REPOSITORIES_REPORTS
  DELETE_GOVERNMENT_REPORTS
  DELETE_DELIVERY_AGENT_REPORTS
}

enum Governorate {
  AL_ANBAR
  BABIL
  BAGHDAD
  BASRA
  DHI_QAR
  AL_QADISIYYAH
  DIYALA
  DUHOK
  ERBIL
  KARBALA
  KIRKUK
  MAYSAN
  MUTHANNA
  NAJAF
  NINAWA
  SALAH_AL_DIN
  SULAYMANIYAH
  WASIT
}

// const orderStatus = [
//   "تم تسجيل الطلب",
//   "جاهز للارسال",
//   "بالطريق مع المندوب",
//   "تم تسليم الطلب",
//   "استبدال الطلب",
//   "راجع جزئى",
//   "راجع كلي",
//   "مؤجل",
//   "تغيير العنوان",
//   "اعاده الارسال",
//   "عند مندوب الاستلام",
//   "قيد المعالجه",
// ];

enum OrderStatus {
  REGISTERED
  READY_TO_SEND
  WITH_DELIVERY_AGENT
  DELIVERED
  REPLACED
  PARTIALLY_RETURNED
  RETURNED
  POSTPONED
  CHANGE_ADDRESS
  RESEND
  WITH_RECEIVING_AGENT
  PROCESSING
}

// const deliveryTypes = ["توصيل عادي", "استبدال"];

enum DeliveryType {
  NORMAL
  REPLACEMENT
}

enum ReportStatus {
  UNPAID // لم يتم التحاسب
  PAID // تم التحاسب
}

enum ReportType {
  COMPANY
  REPOSITORY
  GOVERNORATE
  DELIVERY_AGENT
  BRANCH
  CLIENT
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phone  String?
  fcm    String?
  avatar String?

  admin    Admin?
  employee Employee?
  client   Client?

  deletedReports   Report[]   @relation("deletedBy")
  deletedOrders    Order[]    @relation("deletedBy")
  deletedClients   Client[]   @relation("deletedBy")
  deletedStores    Store[]    @relation("deletedBy")
  deletedEmployees Employee[] @relation("deletedBy")

  notifications Notification[]
}

model Admin {
  id     Int @id @default(autoincrement())
  userId Int @unique

  role AdminRole

  user User @relation(fields: [userId], references: [id])
}

model Employee {
  id     Int @id @default(autoincrement())
  userId Int @unique

  salary       Decimal? @default(0)
  branchId     Int?
  repositoryId Int?

  permissions Permission[]
  role        EmployeeRole

  // locations Location[]
  orders  Order[]
  clients Client[]

  user User @relation(fields: [userId], references: [id])

  repository Repository? @relation(fields: [repositoryId], references: [id])
  branch     Branch?     @relation(fields: [branchId], references: [id])

  reports                 Report[]
  deliveryAgentReports    DeliveryAgentReport[]
  company                 Company                   @relation(fields: [companyId], references: [id])
  companyId               Int
  dileveryAgentsLocations DileveryAgentsLocations[]

  deleted     Boolean   @default(false)
  deletedAt   DateTime?
  deletedBy   User?     @relation("deletedBy", fields: [deletedById], references: [id])
  deletedById Int?
}

model Client {
  id Int @id @default(autoincrement())

  token        String?
  employeeId   Int
  repositoryId Int?
  userId       Int     @unique

  role ClientRole

  orders Order[]
  stores Store[]

  createdBy Employee @relation(fields: [employeeId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  repository Repository? @relation(fields: [repositoryId], references: [id])
  branch     Branch?     @relation(fields: [branchId], references: [id])

  clientReports ClientReport[]
  company       Company        @relation(fields: [companyId], references: [id])
  companyId     Int

  deleted     Boolean   @default(false)
  deletedAt   DateTime?
  deletedBy   User?     @relation("deletedBy", fields: [deletedById], references: [id])
  deletedById Int?
  branchId    Int?
}

model Store {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  logo      String?
  notes     String?

  client        Client         @relation(fields: [clientId], references: [id])
  clientId      Int
  orders        Order[]
  clientReports ClientReport[]
  company       Company        @relation(fields: [companyId], references: [id])
  companyId     Int

  deleted     Boolean   @default(false)
  deletedAt   DateTime?
  deletedBy   User?     @relation("deletedBy", fields: [deletedById], references: [id])
  deletedById Int?
}

model Branch {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String?
  phone     String?

  repositories  Repository[]
  employees     Employee[]
  governorate   Governorate?
  locations     Location[]
  // Order       Order[]
  branchReports BranchReport[]
  company       Company        @relation(fields: [companyId], references: [id])
  companyId     Int
  orders        Order[]
  clients       Client[]
}

model Repository {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branchId Int

  branch            Branch             @relation(fields: [branchId], references: [id])
  employees         Employee[]
  clients           Client[]
  // Order  Order[]
  repositoryReports RepositoryReport[]
  company           Company            @relation(fields: [companyId], references: [id])
  companyId         Int
  Order             Order[]
}

model Location {
  id   Int    @id @default(autoincrement())
  name String @unique

  // deliveryAgents Employee[]
  governorate             Governorate?
  branch                  Branch                    @relation(fields: [branchId], references: [id])
  branchId                Int
  orders                  Order[]
  company                 Company                   @relation(fields: [companyId], references: [id])
  companyId               Int
  dileveryAgentsLocations DileveryAgentsLocations[]
}

model DileveryAgentsLocations {
  deliveryAgent Employee @relation(fields: [deliveryAgentId], references: [id])
  location      Location @relation(fields: [locationId], references: [id])

  deliveryAgentId Int
  locationId      Int

  @@id([deliveryAgentId, locationId])
}

model Company {
  id                                      Int             @id @default(autoincrement())
  name                                    String          @unique
  phone                                   String?
  website                                 String?
  logo                                    String?
  registrationText                        String?
  governoratePrice                        Decimal         @default(0)
  deliveryAgentFee                        Decimal         @default(0)
  // deliveryPrice              Decimal  @default(0)
  baghdadPrice                            Decimal         @default(0)
  additionalPriceForEvery500000IraqiDinar Decimal         @default(0)
  additionalPriceForEveryKilogram         Decimal         @default(0)
  additionalPriceForRemoteAreas           Decimal         @default(0)
  orderStatusAutomaticUpdate              Boolean         @default(false)
  // mainCompany                Boolean  @default(false)
  createdAt                               DateTime        @default(now())
  updatedAt                               DateTime        @updatedAt
  employees                               Employee[]
  clients                                 Client[]
  stores                                  Store[]
  branches                                Branch[]
  repositories                            Repository[]
  locations                               Location[]
  orders                                  Order[]
  reports                                 Report[]
  products                                Product[]
  categories                              Category[]
  sizes                                   Size[]
  colors                                  Color[]
  // notifications                           Notification[]
  banners                                 Banner[]
  CompanyReport                           CompanyReport[]
}

model Order {
  id                              Int                  @id @default(autoincrement())
  totalCost                       Decimal              @default(0)
  paidAmount                      Decimal?             @default(0)
  totalCostInUSD                  Decimal?             @default(0)
  paidAmountInUSD                 Decimal?             @default(0)
  discount                        Decimal?             @default(0)
  receiptNumber                   Int                  @unique @default(autoincrement())
  quantity                        Int                  @default(0)
  weight                          Float                @default(0)
  recipientName                   String
  recipientPhone                  String
  recipientAddress                String
  // TODO: remove this field
  // recorded         Boolean         @default(false)
  details                         String?
  notes                           String?
  status                          OrderStatus          @default(REGISTERED)
  deliveryType                    DeliveryType         @default(NORMAL)
  createdAt                       DateTime             @default(now())
  updatedAt                       DateTime             @updatedAt
  client                          Client?              @relation(fields: [clientId], references: [id])
  deliveryAgent                   Employee?            @relation(fields: [deliveryAgentId], references: [id])
  deliveryDate                    DateTime?
  clientId                        Int?
  deliveryAgentId                 Int?
  orderProducts                   OrderProducts[]
  governorate                     Governorate
  location                        Location?            @relation(fields: [locationId], references: [id])
  currentLocation                 String?
  store                           Store                @relation(fields: [storeId], references: [id])
  locationId                      Int?
  storeId                         Int
  repository                      Repository?          @relation(fields: [repositoryId], references: [id])
  branch                          Branch?              @relation(fields: [branchId], references: [id])
  clientReport                    ClientReport?        @relation(fields: [clientReportReportNumber], references: [reportNumber], onDelete: SetNull)
  clientReportReportNumber        Int?
  repositoryReport                RepositoryReport?    @relation(fields: [repositoryReportReportNumber], references: [reportNumber], onDelete: SetNull)
  repositoryReportReportNumber    Int?
  branchReport                    BranchReport?        @relation(fields: [branchReportReportNumber], references: [reportNumber], onDelete: SetNull)
  branchReportReportNumber        Int?
  deliveryAgentReport             DeliveryAgentReport? @relation(fields: [deliveryAgentReportReportNumber], references: [reportNumber], onDelete: SetNull)
  deliveryAgentReportReportNumber Int?
  governorateReport               GovernorateReport?   @relation(fields: [governorateReportReportNumber], references: [reportNumber], onDelete: SetNull)
  governorateReportReportNumber   Int?
  companyReport                   CompanyReport?       @relation(fields: [companyReportReportNumber], references: [reportNumber], onDelete: SetNull)
  companyReportReportNumber       Int?
  timeline                        Json                 @default("[]")
  company                         Company              @relation(fields: [companyId], references: [id])
  companyId                       Int
  repositoryId                    Int?
  branchId                        Int?

  deleted     Boolean   @default(false)
  deletedAt   DateTime?
  deletedBy   User?     @relation("deletedBy", fields: [deletedById], references: [id])
  deletedById Int?
}

model Report {
  id                      Int          @id @default(autoincrement())
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  status                  ReportStatus @default(UNPAID)
  type                    ReportType
  deleted                 Boolean      @default(false)
  deletedAt               DateTime?
  deletedBy               User?        @relation("deletedBy", fields: [deletedById], references: [id])
  deletedById             Int?
  baghdadOrdersCount      Int?         @default(0)
  governoratesOrdersCount Int?         @default(0)

  createdBy           Employee             @relation(fields: [employeeId], references: [id])
  employeeId          Int
  clientReport        ClientReport?
  repositoryReport    RepositoryReport?
  branchReport        BranchReport?
  deliveryAgentReport DeliveryAgentReport?
  governorateReport   GovernorateReport?
  company             Company              @relation(fields: [companyId], references: [id])
  companyId           Int
  companyReport       CompanyReport?
}

model CompanyReport {
  reportNumber Int     @unique @default(autoincrement())
  report       Report  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId     Int     @unique
  orders       Order[]
  company      Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId    Int
}

model ClientReport {
  reportNumber Int     @unique @default(autoincrement())
  client       Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId     Int
  report       Report  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId     Int     @unique
  store        Store?  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders       Order[]
  storeId      Int?
}

model RepositoryReport {
  reportNumber Int        @unique @default(autoincrement())
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId Int
  report       Report     @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId     Int        @unique
  orders       Order[]
}

model BranchReport {
  reportNumber Int     @unique @default(autoincrement())
  branch       Branch  @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId     Int
  report       Report  @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId     Int     @unique
  orders       Order[]
}

model DeliveryAgentReport {
  reportNumber    Int      @unique @default(autoincrement())
  deliveryAgent   Employee @relation(fields: [deliveryAgentId], references: [id], onDelete: Cascade)
  deliveryAgentId Int
  report          Report   @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId        Int      @unique
  orders          Order[]
}

model GovernorateReport {
  reportNumber Int         @unique @default(autoincrement())
  governorate  Governorate
  report       Report      @relation(fields: [reportId], references: [id], onDelete: Cascade)
  reportId     Int         @unique
  orders       Order[]
}

model Product {
  id            Int             @id @default(autoincrement())
  title         String
  price         Decimal
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  image         String?
  stock         Int             @default(0)
  weight        Float           @default(0)
  // OrderProducts OrderProducts[]
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    Int
  orderProducts OrderProducts[]
  productColors ProductColors[]
  productSizes  ProductSizes[]
  company       Company         @relation(fields: [companyId], references: [id])
  companyId     Int
}

model Category {
  id        Int       @id @default(autoincrement())
  title     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  company   Company   @relation(fields: [companyId], references: [id])
  companyId Int
}

model OrderProducts {
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  quantity  Int
  color     Color?  @relation(fields: [colorId], references: [id])
  colorId   Int?
  size      Size?   @relation(fields: [sizeId], references: [id])
  sizeId    Int?
  // @@unique([orderId, productId, colorId, sizeId])

  @@id([productId, orderId])
}

model Size {
  id            Int             @id @default(autoincrement())
  title         String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  productSizes  ProductSizes[]
  orderProducts OrderProducts[]
  company       Company         @relation(fields: [companyId], references: [id])
  companyId     Int
}

model Color {
  id            Int             @id @default(autoincrement())
  title         String          @unique
  code          String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  productColors ProductColors[]
  orderProducts OrderProducts[]
  company       Company         @relation(fields: [companyId], references: [id])
  companyId     Int
}

model ProductColors {
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  color     Color   @relation(fields: [colorId], references: [id])
  colorId   Int
  quantity  Int

  @@id([productId, colorId])
}

model ProductSizes {
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  size      Size    @relation(fields: [sizeId], references: [id])
  sizeId    Int
  quantity  Int

  @@id([productId, sizeId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  content   String
  // type    String // success, error, warning, info
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  seen      Boolean  @default(false)
  // company   Company  @relation(fields: [companyId], references: [id])
  // companyId Int
}

model Banner {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  image     String?
  url       String?
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int
}
