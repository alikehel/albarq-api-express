generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AdminRole {
  ADMIN
  ADMIN_ASSISTANT
}

enum EmployeeRole {
  COMPANY_MANAGER
  ACCOUNT_MANAGER
  ACCOUNTANT
  DELIVERY_AGENT
  RECEIVING_AGENT
  BRANCH_MANAGER
  EMERGENCY_EMPLOYEE
  DATA_ENTRY
  REPOSITORIY_EMPLOYEE
  INQUIRY_EMPLOYEE
}

enum ClientRole {
  CLIENT
  CLIENT_ASSISTANT
}

enum Permission {
  ADD_STORE // اضافة متجر
  ADD_CLIENT // اضافة عميل
  ADD_LOCATION // اضافة منطقة
  ADD_DELIVERY_AGENT // اضافة مندوب

  ADD_ORDER // اضافة طلبية
  DELETE_ORDER // مسح طلبية
  CONFIRM_ORDER // تأكيد طلبية

  CHANGE_ORDER_STATUS // تغيير حالة طلبية
  CHANGE_CLOSED_ORDER_STATUS // تغيير حالة طلبية مغلقة
  CHANGE_ORDER_TOTAL_AMOUNT // تعديل المبلغ الكلي لطلبية
  LOCK_ORDER_STATUS // قفل حالة طلبية

  CHANGE_ORDER_DELIVERY_AGENT // احالة طلبية من مندوب الي اخر
  CHANGE_ORDER_BRANCH // احالة طلبية من فرع الي اخر
  CHANGE_ORDER_CLIENT // احالة طلبية من عميل الي اخر
  CHANGE_ORDER_COMPANY // احالة طلبية من شركة الي اخرى

  CREATE_DELIVERY_AGENT_REPORT // انشاء كشف مندوب
  CREATE_CLIENT_REPORT // انشاء كشف عميل
  CREATE_REPOSITORY_REPORT // انشاء كشف مخزن
  CREATE_COMPANY_REPORT // انشاء كشف شركة
  CREATE_GOVERNMENT_REPORT // انشاء كشف محافظة
  CREATE_BRANCH_REPORT // انشاء كشف فرع

  DELETE_COMPANY_REPORT // مسح كشف شركة
  DELETE_REPOSITORY_REPORT // مسح كشف مخزن
  DELETE_GOVERNMENT_REPORT // مسح كشف محافظة
  DELETE_DELIVERY_AGENT_REPORT // مسح كشف مندوب
  DELETE_CLIENT_REPORT // مسح كشف عميل
  DELETE_BRANCH_REPORT // مسح كشف فرع
}

enum Governorate {
  AL_ANBAR
  BABIL
  BAGHDAD
  BASRA
  DHI_QAR
  AL_QADISIYYAH
  DIYALA
  DUHOK
  ERBIL
  KARBALA
  KIRKUK
  MAYSAN
  MUTHANNA
  NAJAF
  NINAWA
  SALAH_AL_DIN
  SULAYMANIYAH
  WASIT
}

enum OrderStatus {
  REGISTERED
  READY_TO_SEND
  WITH_DELIVERY_AGENT
  DELIVERED
  REPLACED
  PARTIALLY_RETURNED
  RETURNED
  POSTPONED
  CHANGE_ADDRESS
  RESEND
  WITH_RECEIVING_AGENT
  PROCESSING
}

enum AutomaticUpdateReturnCondition {
  WITH_AGENT
  IN_REPOSITORY
}

enum SecondaryStatus {
  WITH_CLIENT
  WITH_AGENT
  IN_REPOSITORY
}

enum DeliveryType {
  NORMAL
  REPLACEMENT
}

enum ReportStatus {
  UNPAID
  PAID
}

enum ReportType {
  COMPANY
  REPOSITORY
  GOVERNORATE
  DELIVERY_AGENT
  BRANCH
  CLIENT
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  name      String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phone  String  @unique
  fcm    String?
  avatar String? @default("https://w7.pngwing.com/pngs/627/693/png-transparent-computer-icons-user-user-icon.png")

  admin    Admin?
  employee Employee?
  client   Client?

  deletedReports   Report[]   @relation("deletedBy")
  deletedOrders    Order[]    @relation("deletedBy")
  deletedClients   Client[]   @relation("deletedBy")
  deletedStores    Store[]    @relation("deletedBy")
  deletedEmployees Employee[] @relation("deletedBy")

  notifications Notification[]
}

model Admin {
  id Int @id
  // userId Int @unique

  // phone String?

  role AdminRole

  user User @relation(fields: [id], references: [id])
}

model Employee {
  id Int @id
  // userId Int @unique

  // phone String?

  salary       Float? @default(0)
  deliveryCost Float? @default(0)
  branchId     Int?
  repositoryId Int?

  permissions Permission[]
  role        EmployeeRole

  // locations Location[]
  orders  Order[]
  clients Client[]

  user User @relation(fields: [id], references: [id])

  repository Repository? @relation(fields: [repositoryId], references: [id])
  branch     Branch?     @relation(fields: [branchId], references: [id])

  reports                 Report[]
  deliveryAgentReports    DeliveryAgentReport[]
  company                 Company                   @relation(fields: [companyId], references: [id])
  companyId               Int
  deliveryAgentsLocations DeliveryAgentsLocations[]
  // inquiryEmployeesLocations InquiryEmployeesLocations[]

  deleted                Boolean                  @default(false)
  deletedAt              DateTime?
  deletedBy              User?                    @relation("deletedBy", fields: [deletedById], references: [id])
  deletedById            Int?
  // Order       Order?    @relation("inquiryEmployees", fields: [orderId], references: [id])
  // orderId     Int?
  ordersInquiryEmployees OrdersInquiryEmployees[]

  // @@unique([companyId, phone])
}

model Client {
  id Int @id

  // phone String?

  token        String?
  employeeId   Int
  repositoryId Int?
  // userId       Int     @unique

  role ClientRole

  orders Order[]
  stores Store[]

  // [{ governorate: "string", fee: 0 }]
  governoratesDeliveryCosts Json @default("[]")

  createdBy Employee @relation(fields: [employeeId], references: [id])
  user      User     @relation(fields: [id], references: [id])

  repository Repository? @relation(fields: [repositoryId], references: [id])
  branch     Branch?     @relation(fields: [branchId], references: [id])

  clientReports ClientReport[]
  company       Company        @relation(fields: [companyId], references: [id])
  companyId     Int

  deleted     Boolean   @default(false)
  deletedAt   DateTime?
  deletedBy   User?     @relation("deletedBy", fields: [deletedById], references: [id])
  deletedById Int?
  branchId    Int?
  products    Product[]

  // @@unique([companyId, phone])
}

model Store {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  logo      String?  @default("https://w7.pngwing.com/pngs/307/22/png-transparent-computer-icons-business-company-corporation-company-angle-company-text.png")
  notes     String?

  client        Client         @relation(fields: [clientId], references: [id])
  clientId      Int
  orders        Order[]
  clientReports ClientReport[]
  company       Company        @relation(fields: [companyId], references: [id])
  companyId     Int

  deleted     Boolean   @default(false)
  deletedAt   DateTime?
  deletedBy   User?     @relation("deletedBy", fields: [deletedById], references: [id])
  deletedById Int?
  products    Product[]
}

model Branch {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String?
  phone     String?

  repositories    Repository[]
  employees       Employee[]
  governorate     Governorate?
  locations       Location[]
  // Order       Order[]
  branchReports   BranchReport[]
  company         Company           @relation(fields: [companyId], references: [id])
  companyId       Int
  orders          Order[]
  clients         Client[]
  automaticUpdate AutomaticUpdate[]
}

model Repository {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  branchId Int

  branch            Branch             @relation(fields: [branchId], references: [id])
  employees         Employee[]
  clients           Client[]
  // Order  Order[]
  repositoryReports RepositoryReport[]
  company           Company            @relation(fields: [companyId], references: [id])
  companyId         Int
  Order             Order[]
}

model Location {
  id   Int    @id @default(autoincrement())
  name String

  // deliveryAgents Employee[]
  governorate             Governorate?
  branch                  Branch                    @relation(fields: [branchId], references: [id])
  branchId                Int
  orders                  Order[]
  company                 Company                   @relation(fields: [companyId], references: [id])
  companyId               Int
  deliveryAgentsLocations DeliveryAgentsLocations[]
  remote                  Boolean                   @default(false)
  // inquiryEmployeesLocations InquiryEmployeesLocations[]
}

model DeliveryAgentsLocations {
  deliveryAgent Employee @relation(fields: [deliveryAgentId], references: [id])
  location      Location @relation(fields: [locationId], references: [id])

  deliveryAgentId Int
  locationId      Int

  @@id([deliveryAgentId, locationId])
}

// model InquiryEmployeesLocations {
//   inquiryEmployee Employee @relation(fields: [inquiryEmployeeId], references: [id])
//   location        Location @relation(fields: [locationId], references: [id])

//   inquiryEmployeeId Int
//   locationId        Int

//   @@id([inquiryEmployeeId, locationId])
// }

model Company {
  id                                      Int               @id @default(autoincrement())
  name                                    String            @unique
  treasury                                Float             @default(0)
  phone                                   String?
  website                                 String?
  logo                                    String?           @default("https://w7.pngwing.com/pngs/307/22/png-transparent-computer-icons-business-company-corporation-company-angle-company-text.png")
  color                                   String            @default("FF0000")
  registrationText                        String?
  governoratePrice                        Float             @default(0)
  deliveryAgentFee                        Float             @default(0)
  // deliveryPrice              Float  @default(0)
  baghdadPrice                            Float             @default(0)
  additionalPriceForEvery500000IraqiDinar Float             @default(0)
  additionalPriceForEveryKilogram         Float             @default(0)
  additionalPriceForRemoteAreas           Float             @default(0)
  orderStatusAutomaticUpdate              Boolean           @default(false)
  // mainCompany                Boolean  @default(false)
  createdAt                               DateTime          @default(now())
  updatedAt                               DateTime          @updatedAt
  employees                               Employee[]
  clients                                 Client[]
  stores                                  Store[]
  branches                                Branch[]
  repositories                            Repository[]
  locations                               Location[]
  orders                                  Order[]
  reports                                 Report[]
  products                                Product[]
  categories                              Category[]
  sizes                                   Size[]
  colors                                  Color[]
  // notifications                           Notification[]
  banners                                 Banner[]
  CompanyReport                           CompanyReport[]
  automaticUpdates                        AutomaticUpdate[]
}

model Order {
  id                    Int                  @id @default(autoincrement())
  totalCost             Float                @default(0)
  paidAmount            Float?               @default(0)
  deliveryCost          Float?               @default(0)
  clientNet             Float?               @default(0)
  // TODO: remove this field
  deliveryAgentNet      Float?               @default(0)
  companyNet            Float?               @default(0)
  discount              Float?               @default(0)
  // TODO
  receiptNumber         Int                  @default(autoincrement())
  quantity              Int                  @default(0)
  weight                Float                @default(0)
  recipientName         String
  recipientPhones       String[]
  recipientAddress      String
  // TODO: remove this field
  // recorded         Boolean         @default(false)
  details               String?
  notes                 String?
  status                OrderStatus          @default(REGISTERED)
  secondaryStatus       SecondaryStatus?
  deliveryType          DeliveryType         @default(NORMAL)
  confirmed             Boolean              @default(false)
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  client                Client?              @relation(fields: [clientId], references: [id])
  deliveryAgent         Employee?            @relation(fields: [deliveryAgentId], references: [id])
  // inquiryEmployees      Employee[]           @relation("inquiryEmployees")
  deliveryDate          DateTime?
  clientId              Int?
  deliveryAgentId       Int?
  orderProducts         OrderProducts[]
  governorate           Governorate
  location              Location?            @relation(fields: [locationId], references: [id])
  currentLocation       String?
  store                 Store                @relation(fields: [storeId], references: [id])
  locationId            Int?
  storeId               Int
  repository            Repository?          @relation(fields: [repositoryId], references: [id])
  branch                Branch?              @relation(fields: [branchId], references: [id])
  clientReport          ClientReport?        @relation(fields: [clientReportId], references: [id], onDelete: SetNull)
  clientReportId        Int?
  repositoryReport      RepositoryReport?    @relation(fields: [repositoryReportId], references: [id], onDelete: SetNull)
  repositoryReportId    Int?
  branchReport          BranchReport?        @relation(fields: [branchReportId], references: [id], onDelete: SetNull)
  branchReportId        Int?
  deliveryAgentReport   DeliveryAgentReport? @relation(fields: [deliveryAgentReportId], references: [id], onDelete: SetNull)
  deliveryAgentReportId Int?
  governorateReport     GovernorateReport?   @relation(fields: [governorateReportId], references: [id], onDelete: SetNull)
  governorateReportId   Int?
  companyReport         CompanyReport?       @relation(fields: [companyReportId], references: [id], onDelete: SetNull)
  companyReportId       Int?
  timeline              Json                 @default("[]")
  company               Company              @relation(fields: [companyId], references: [id])
  companyId             Int
  repositoryId          Int?
  branchId              Int?

  deleted                Boolean                  @default(false)
  deletedAt              DateTime?
  deletedBy              User?                    @relation("deletedBy", fields: [deletedById], references: [id])
  deletedById            Int?
  automaticUpdate        AutomaticUpdate?         @relation(fields: [automaticUpdateId], references: [id])
  automaticUpdateId      Int?
  ordersInquiryEmployees OrdersInquiryEmployees[]
}

model OrdersInquiryEmployees {
  order             Order    @relation(fields: [orderId], references: [id])
  orderId           Int
  inquiryEmployee   Employee @relation(fields: [inquiryEmployeeId], references: [id])
  inquiryEmployeeId Int

  @@id([orderId, inquiryEmployeeId])
}

model Report {
  id                      Int          @id @default(autoincrement())
  createdAt               DateTime     @default(now())
  updatedAt               DateTime     @updatedAt
  status                  ReportStatus @default(UNPAID)
  confirmed               Boolean      @default(false)
  type                    ReportType
  deleted                 Boolean      @default(false)
  deletedAt               DateTime?
  deletedBy               User?        @relation("deletedBy", fields: [deletedById], references: [id])
  deletedById             Int?
  baghdadOrdersCount      Int?         @default(0)
  governoratesOrdersCount Int?         @default(0)
  totalCost               Float        @default(0)
  paidAmount              Float        @default(0)
  deliveryCost            Float        @default(0)
  clientNet               Float        @default(0)
  deliveryAgentNet        Float        @default(0)
  companyNet              Float        @default(0)

  createdBy           Employee             @relation(fields: [employeeId], references: [id])
  employeeId          Int
  clientReport        ClientReport?
  repositoryReport    RepositoryReport?
  branchReport        BranchReport?
  deliveryAgentReport DeliveryAgentReport?
  governorateReport   GovernorateReport?
  company             Company              @relation(fields: [companyId], references: [id])
  companyId           Int
  companyReport       CompanyReport?
}

model CompanyReport {
  id        Int     @id
  report    Report  @relation(fields: [id], references: [id], onDelete: Cascade)
  orders    Order[]
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId Int
}

model ClientReport {
  id       Int     @id
  client   Client  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId Int
  report   Report  @relation(fields: [id], references: [id], onDelete: Cascade)
  store    Store?  @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders   Order[]
  storeId  Int?
}

model RepositoryReport {
  id           Int        @id
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  repositoryId Int
  report       Report     @relation(fields: [id], references: [id], onDelete: Cascade)
  orders       Order[]
}

model BranchReport {
  id       Int     @id
  branch   Branch  @relation(fields: [branchId], references: [id], onDelete: Cascade)
  branchId Int
  report   Report  @relation(fields: [id], references: [id], onDelete: Cascade)
  orders   Order[]
}

model DeliveryAgentReport {
  id              Int      @id
  deliveryAgent   Employee @relation(fields: [deliveryAgentId], references: [id], onDelete: Cascade)
  deliveryAgentId Int
  report          Report   @relation(fields: [id], references: [id], onDelete: Cascade)
  orders          Order[]
}

model GovernorateReport {
  id          Int         @id
  governorate Governorate
  report      Report      @relation(fields: [id], references: [id], onDelete: Cascade)
  orders      Order[]
}

model Product {
  id            Int             @id @default(autoincrement())
  title         String
  price         Float
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  image         String?         @default("https://w7.pngwing.com/pngs/436/721/png-transparent-package-delivery-box-freight-transport-computer-icons-shipping-miscellaneous-angle-freight-transport.png")
  stock         Int             @default(0)
  weight        Float           @default(0)
  store         Store           @relation(fields: [storeId], references: [id])
  // OrderProducts OrderProducts[]
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    Int
  orderProducts OrderProducts[]
  productColors ProductColors[]
  productSizes  ProductSizes[]
  company       Company         @relation(fields: [companyId], references: [id])
  companyId     Int
  storeId       Int
  client        Client          @relation(fields: [clientId], references: [id])
  clientId      Int
}

model Category {
  id        Int       @id @default(autoincrement())
  title     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  company   Company   @relation(fields: [companyId], references: [id])
  companyId Int
}

model OrderProducts {
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  quantity  Int
  color     Color?  @relation(fields: [colorId], references: [id])
  colorId   Int?
  size      Size?   @relation(fields: [sizeId], references: [id])
  sizeId    Int?
  // @@unique([orderId, productId, colorId, sizeId])

  @@id([productId, orderId])
}

model Size {
  id            Int             @id @default(autoincrement())
  title         String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  productSizes  ProductSizes[]
  orderProducts OrderProducts[]
  company       Company         @relation(fields: [companyId], references: [id])
  companyId     Int
}

model Color {
  id            Int             @id @default(autoincrement())
  title         String          @unique
  code          String          @unique
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  productColors ProductColors[]
  orderProducts OrderProducts[]
  company       Company         @relation(fields: [companyId], references: [id])
  companyId     Int
}

model ProductColors {
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  color     Color   @relation(fields: [colorId], references: [id])
  colorId   Int
  quantity  Int

  @@id([productId, colorId])
}

model ProductSizes {
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  size      Size    @relation(fields: [sizeId], references: [id])
  sizeId    Int
  quantity  Int

  @@id([productId, sizeId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  title     String
  content   String
  // type    String // success, error, warning, info
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  seen      Boolean  @default(false)
  // company   Company  @relation(fields: [companyId], references: [id])
  // companyId Int
}

model Banner {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String
  content   String?
  image     String?  @default("https://w7.pngwing.com/pngs/819/548/png-transparent-photo-image-landscape-icon-images.png")
  url       String?
  company   Company  @relation(fields: [companyId], references: [id])
  companyId Int
}

model AutomaticUpdate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company   Company @relation(fields: [companyId], references: [id])
  companyId Int

  orderStatus    OrderStatus
  newOrderStatus OrderStatus @default(DELIVERED)

  governorate     Governorate
  returnCondition AutomaticUpdateReturnCondition?
  updateAt        Int                             @default(22) // 0 -> 24
  checkAfter      Int                             @default(24) // 0 -> infinity

  orders  Order[]
  enabled Boolean @default(true)

  branch   Branch @relation(fields: [branchId], references: [id])
  branchId Int

  @@unique([orderStatus, governorate, branchId, companyId])
}
